---
import { getLocale } from "astro-i18n-aut";
import { useTranslations } from "../i18n/utils";
import type { Lang } from "../i18n/ui";

// This page handles email verification callbacks from Nhost
const lang = getLocale(Astro.url);
const t = useTranslations(lang as Lang);

const url = new URL(Astro.request.url);
const token = url.searchParams.get("token");
const type = url.searchParams.get("type");

let message = "";
let error = "";

if (token && type === "emailConfirmation") {
  try {
    // Send the verification to Nhost
    const NHOST_SUBDOMAIN = process.env.NHOST_SUBDOMAIN;
    const NHOST_REGION = process.env.NHOST_REGION;
    const NHOST_AUTH_URL = `https://${NHOST_SUBDOMAIN}.auth.${NHOST_REGION}.nhost.run/v1`;

    const response = await fetch(`${NHOST_AUTH_URL}/user/email/confirm`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ token }),
    });

    const result = await response.json();

    if (response.ok && !result.error) {
      message = t("verifyEmail.successMessage");
    } else {
      error = result.error?.message || t("verifyEmail.failureMessage");
    }
  } catch (err) {
    error = t("verifyEmail.networkError");
  }
} else if (!token) {
  error = t("verifyEmail.missingToken");
} else {
  error = t("verifyEmail.invalidType");
}

// Check if user is already signed in using our cookie-based approach
const userCookie = Astro.cookies.get("nhost-user")?.value;
const accessTokenCookie = Astro.cookies.get("nhost-access-token")?.value;
if (userCookie && accessTokenCookie) {
  return Astro.redirect("/dashboard");
}
---

<!DOCTYPE html>
<html lang={lang}>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{t("verifyEmail.title")}</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 dark:bg-gray-900">
    <div class="flex min-h-screen items-center justify-center px-6 py-12">
        <div class="w-full max-w-md">
            <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                <div class="text-center">
                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                        {t("verifyEmail.heading")}
                    </h1>
                    
                    {message && (
                        <div class="mb-4 p-4 text-green-800 bg-green-50 dark:bg-green-900 dark:text-green-200 rounded-lg">
                            <p>{message}</p>
                        </div>
                    )}
                    
                    {error && (
                        <div class="mb-4 p-4 text-red-800 bg-red-50 dark:bg-red-900 dark:text-red-200 rounded-lg">
                            <p>{error}</p>
                        </div>
                    )}
                    
                    <div class="mt-6 flex flex-col space-y-3">
                        {message && (
                            <a 
                                href="/signin" 
                                class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition duration-200"
                            >
                                {t("verifyEmail.signInNow")}
                            </a>
                        )}
                        
                        <a 
                            href="/" 
                            class="w-full bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition duration-200"
                        >
                            {t("verifyEmail.backToHome")}
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>