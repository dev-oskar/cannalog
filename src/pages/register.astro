---
import { useI18n } from "../integrations/i18n-globals";
import { authUtils } from "../lib/nhost";

import Logo from "../components/ui/Logo.astro";
import PublicLayout from "../layouts/PublicLayout.astro";

const { lang, t, translatePath } = useI18n(Astro);

export const prerender = false; // Not needed in 'server' mode

// Note: Authentication checks are handled by middleware.ts
// The middleware will redirect authenticated users away from this page

let error = "";
let success = "";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();

    if (!data) {
      throw new Error(t("register.errors.noFormData"));
    }

    const email = data.get("email")?.toString();
    const password = data.get("password")?.toString();
    const confirmPassword = data.get("confirm-password")?.toString();
    const terms = data.get("terms");

    if (!email) {
      throw new Error(t("register.errors.emailRequired"));
    }

    if (!password) {
      throw new Error(t("register.errors.passwordRequired"));
    }

    if (password !== confirmPassword) {
      throw new Error(t("register.errors.passwordsMismatch"));
    }

    if (terms !== "on") {
      throw new Error(t("register.errors.termsRequired"));
    }

    // Register with Nhost
    console.log("Attempting registration with:", { email });
    const result = await authUtils.signUp(email, password);
    console.log("Registration result:", result);

    // Handle the different possible return types from authUtils.signUp
    if ("error" in result && result.error) {
      console.error("Registration error details:", result.error);
      throw new Error(result.error.message || "Registration failed");
    }

    // Check if the Nhost response indicates an error
    if ("error" in result && result.error) {
      throw new Error(
        result.error.message || t("register.errors.registrationFailed")
      );
    }

    // Registration successful - user needs to verify email
    success = t("register.successMessage");
  } catch (err) {
    if (err instanceof Error) {
      error = err.message;
    } else {
      error = t("register.errors.unexpectedError");
    }
  }
}
---

<PublicLayout
  title={t("register.title")}
  description={t("register.description")}
  locale={lang}
>
  <section class="">
    <div
      class="flex flex-col items-center justify-center my-4 px-6 py-8 mx-auto md:h-fit lg:py-0"
    >
      <a href="#" class="flex items-center mb-6 text-2xl font-semibold">
        <Logo />
      </a>
      <div
        class="w-full rounded-lg shadow dark:border md:mt-0 sm:max-w-lg xl:p-0"
      >
        <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
          <h1 class="text-xl font-bold leading-tight tracking-tightmd:text-2xl">
            {t("register.heading")}
          </h1>

          {
            error && (
              <div
                class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
                role="alert"
              >
                {error}
              </div>
            )
          }

          {
            success && (
              <div
                class="p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400"
                role="alert"
              >
                {success}
              </div>
            )
          }

          <form class="space-y-4 md:space-y-6" method="POST">
            <div>
              <label
                for="email"
                class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >{t("register.emailLabel")}</label
              >
              <input
                type="email"
                name="email"
                id="email"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder={t("register.emailPlaceholder")}
                required="true"
              />
            </div>
            <div>
              <label
                for="password"
                class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >{t("register.passwordLabel")}</label
              >
              <input
                type="password"
                name="password"
                id="password"
                placeholder={t("register.passwordPlaceholder")}
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                required="true"
              />
            </div>
            <div>
              <label
                for="confirm-password"
                class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >{t("register.confirmPasswordLabel")}</label
              >
              <!-- type="confirm-password" -->
              <input
                type="password"
                name="confirm-password"
                id="confirm-password"
                placeholder={t("register.confirmPasswordPlaceholder")}
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                required="true"
              />
            </div>
            <div class="flex items-start">
              <div class="flex items-center h-5">
                <input
                  id="terms"
                  name="terms"
                  aria-describedby="terms"
                  type="checkbox"
                  class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800"
                  required="true"
                />
              </div>
              <div class="ml-3 text-sm">
                <label
                  for="terms"
                  class="font-light text-gray-500 dark:text-gray-300"
                  >{t("register.termsLabel")}<a
                    class="pl-1 font-medium text-primary-600 hover:underline dark:text-primary-500"
                    href="#">{t("register.termsLink")}</a
                  ></label
                >
              </div>
            </div>
            <button
              type="submit"
              class="w-full text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
              >{t("register.button")}</button
            >
            <p class="text-sm font-light text-gray-500 dark:text-gray-400">
              {t("register.alreadyHaveAccount")}
              <a
                href={translatePath("/signin")}
                class="font-medium text-primary-600 hover:underline dark:text-primary-500"
                >{t("register.loginHere")}</a
              >
            </p>
          </form>
        </div>
      </div>
    </div>
  </section>
</PublicLayout>
