---
// Define the shape for user information
export interface User {
  name: string;
  email: string;
  avatarUrl: string;
}

// Define the shape for a simple navigation link
export interface NavLink {
  href: string;
  label: string;
  svgPath: string[];
  badge?: string;
}

// Define the shape for a dropdown menu item
export interface NavDropdown {
  id: string; // Unique ID for collapse functionality
  label: string;
  svgPath: string[];
  subLinks: NavLink[];
}

// A union type to allow either a link or a dropdown in the same array
export type NavItem = NavLink | NavDropdown;

export interface Props {
  user?: User;
  mainNavItems?: NavItem[];
  footerNavLinks?: NavLink[];
}

// Helper to check if an item is a dropdown
function isDropdown(item: NavItem): item is NavDropdown {
  return "subLinks" in item;
}

// Set default values for the props, mimicking the new Flowbite structure
const {
  user = {
    name: "Neil Sims",
    email: "neil.sims@flowbite.com",
    avatarUrl: "https://flowbite.com/docs/images/people/profile-picture-5.jpg",
  },
  mainNavItems = [
    {
      href: "#",
      label: "Overview",
      svgPath: [
        "M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z",
        "M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z",
      ],
    },
    {
      id: "dropdown-pages",
      label: "Pages",
      svgPath: [
        "M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z",
      ],
      subLinks: [
        { href: "#", label: "Settings", svgPath: [] },
        { href: "#", label: "Kanban", svgPath: [] },
        { href: "#", label: "Calendar", svgPath: [] },
      ],
    },
    {
      href: "#",
      label: "Messages",
      svgPath: [
        "M8.707 7.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l2-2a1 1 0 00-1.414-1.414L11 7.586V3a1 1 0 10-2 0v4.586l-.293-.293z",
        "M3 5a2 2 0 012-2h1a1 1 0 010 2H5v7h2l1 2h4l1-2h2V5h-1a1 1 0 110-2h1a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5z",
      ],
      badge: "6",
    },
  ],
  footerNavLinks = [
    {
      href: "#",
      label: "Docs",
      svgPath: [
        "M9 2a1 1 0 000 2h2a1 1 0 100-2H9z",
        "M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z",
      ],
    },
    {
      href: "#",
      label: "Components",
      svgPath: [
        "M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z",
      ],
    },
    {
      href: "#",
      label: "Help",
      svgPath: [
        "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0c0 .993-.241 1.929-.668 2.754l-1.524-1.525a3.997 3.997 0 00.078-2.183l1.562-1.562C15.802 8.249 16 9.1 16 10zm-5.165 3.913l1.58 1.58A5.98 5.98 0 0110 16a5.976 5.976 0 01-2.516-.552l1.562-1.562a4.006 4.006 0 001.789.027zm-4.677-2.796a4.002 4.002 0 01-.041-2.08l-.08.08-1.53-1.533A5.98 5.98 0 004 10c0 .954.223 1.856.619 2.657l1.54-1.54zm1.088-6.45A5.974 5.974 0 0110 4c.954 0 1.856.223 2.657.619l-1.54 1.54a4.002 4.002 0 00-2.346.033L7.246 4.668zM12 10a2 2 0 11-4 0 2 2 0 014 0z",
      ],
    },
  ],
} = Astro.props;
---

<aside
  id="logo-sidebar"
  class="fixed top-0 left-0 z-50 w-64 h-screen transition-transform -translate-x-full bg-card-bg-color border-r border-tertiary/20 sm:translate-x-0"
  aria-label="Sidebar"
>
  <div class="h-full px-3 pb-4 overflow-y-auto bg-card-bg-color flex flex-col">
    <div>
      <div class="flex flex-col items-center py-5">
        <img
          class="w-24 h-24 mb-3 rounded-full shadow-lg"
          src={user.avatarUrl}
          alt=`${user.name} avatar`
        />
        <h5 class="mb-1 text-xl font-medium text-text-color">{user.name}</h5>
        <span class="text-sm text-text-color/70">{user.email}</span>
        <form action="/api/auth/signout" method="post" class="w-full">
          <button
            type="submit"
            class="inline-flex items-center justify-center w-full px-4 py-2 mt-4 text-sm font-medium text-center text-text-color border border-tertiary/20 rounded-lg hover:bg-secondary/10 focus:ring-4 focus:outline-none focus:ring-primary/50"
          >
          <svg
            class="w-4 h-4 me-2"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 18 16"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M1 8h11m0 0L8 4m4 4-4 4m4-11h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-3"
            ></path>
          </svg>
          Logout
          </button>
        </form>
      </div>

      <ul class="space-y-2 font-medium border-t border-tertiary/20 pt-4 mt-4">
        {
          mainNavItems.map((item) => (
            <li>
              {isDropdown(item) ? (
                <>
                  <button
                    type="button"
                    class="flex items-center w-full p-2 text-base text-text-color rounded-lg group hover:bg-secondary/10 transition duration-75"
                    aria-controls={item.id}
                    data-collapse-toggle={item.id}
                  >
                    <svg
                      class="flex-shrink-0 w-6 h-6 text-text-color/70 transition duration-75 group-hover:text-text-color"
                      aria-hidden="true"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      {item.svgPath.map((path) => (
                        <path
                          fill-rule="evenodd"
                          d={path}
                          clip-rule="evenodd"
                        />
                      ))}
                    </svg>
                    <span class="flex-1 ms-3 text-left whitespace-nowrap">
                      {item.label}
                    </span>
                    <svg
                      class="w-6 h-6"
                      aria-hidden="true"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </button>
                  <ul id={item.id} class="hidden py-2 space-y-2">
                    {item.subLinks.map((subLink) => (
                      <li>
                        <a
                          href={subLink.href}
                          class="flex items-center w-full p-2 text-text-color rounded-lg pl-11 group hover:bg-secondary/10"
                        >
                          {subLink.label}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  href={item.href}
                  class="flex items-center p-2 text-text-color rounded-lg hover:bg-secondary/10 group"
                >
                  <svg
                    class="w-6 h-6 text-text-color/70 transition duration-75 group-hover:text-text-color"
                    aria-hidden="true"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    {item.svgPath.map((path) => (
                      <path d={path} />
                    ))}
                  </svg>
                  <span class="flex-1 ms-3 whitespace-nowrap">
                    {item.label}
                  </span>
                  {item.badge && (
                    <span class="inline-flex items-center justify-center px-2 ms-3 text-sm font-medium text-primary bg-primary-600/20 rounded-full">
                      {item.badge}
                    </span>
                  )}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </div>
    <ul class="pt-4 mt-auto space-y-2 font-medium border-t border-tertiary/20">
      {
        footerNavLinks.map((link) => (
          <li>
            <a
              href={link.href}
              class="flex items-center p-2 text-text-color rounded-lg hover:bg-secondary/10 group"
            >
              <svg
                class="flex-shrink-0 w-6 h-6 text-text-color/70 transition duration-75 group-hover:text-text-color"
                aria-hidden="true"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                {link.svgPath.map((path) => (
                  <path fill-rule="evenodd" d={path} clip-rule="evenodd" />
                ))}
              </svg>
              <span class="ms-3">{link.label}</span>
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</aside>
